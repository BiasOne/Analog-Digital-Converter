
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000454  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802000  00802000  000004c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000547d  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d98  00000000  00000000  00005a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076b  00000000  00000000  000097c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00009f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004626  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000295  00000000  00000000  0000e6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000e953  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_71>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a4 30       	cpi	r26, 0x04	; 4
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
 228:	0c 94 28 02 	jmp	0x450	; 0x450 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <adc_init>:
#define cdsMinus	PIN6_bm

int16_t data;

void adc_init(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
	//7_1
	PORTA.OUTCLR = cdsPlus| cdsMinus | inPlus | inMinus; //0b01110010
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	96 e0       	ldi	r25, 0x06	; 6
 23c:	22 e7       	ldi	r18, 0x72	; 114
 23e:	fc 01       	movw	r30, r24
 240:	26 83       	std	Z+6, r18	; 0x06
	PORTA.DIRCLR = cdsPlus| cdsMinus | inPlus | inMinus;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	96 e0       	ldi	r25, 0x06	; 6
 246:	22 e7       	ldi	r18, 0x72	; 114
 248:	fc 01       	movw	r30, r24
 24a:	22 83       	std	Z+2, r18	; 0x02
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc;	//0b00010000
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	20 e1       	ldi	r18, 0x10	; 16
 252:	fc 01       	movw	r30, r24
 254:	21 83       	std	Z+1, r18	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFB_gc;						//0b00000000 // not sure if its AREFA OR AREFB?
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	20 e3       	ldi	r18, 0x30	; 48
 25c:	fc 01       	movw	r30, r24
 25e:	22 83       	std	Z+2, r18	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;				//0b00000111
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	27 e0       	ldi	r18, 0x07	; 7
 266:	fc 01       	movw	r30, r24
 268:	24 83       	std	Z+4, r18	; 0x04
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc | ADC_CH_MUXNEG_PIN6_gc; //0b01000010 tried using cdsPlus and cdsMinus and they dont work??
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	2a e0       	ldi	r18, 0x0A	; 10
 270:	fc 01       	movw	r30, r24
 272:	21 a3       	std	Z+33, r18	; 0x21
	ADCA.EVCTRL = ADC_EVSEL_0123_gc | ADC_EVACT_CH0_gc; //0b00000100 not sure if its chanels 0-3 or just 1??
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	fc 01       	movw	r30, r24
 27c:	23 83       	std	Z+3, r18	; 0x03
	
	//7_2
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	fc 01       	movw	r30, r24
 286:	22 a3       	std	Z+34, r18	; 0x22
	PMIC.CTRL=PMIC_LOLVLEN_bm;
 288:	80 ea       	ldi	r24, 0xA0	; 160
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	fc 01       	movw	r30, r24
 290:	22 83       	std	Z+2, r18	; 0x02
	sei();
 292:	78 94       	sei
	
	ADCA.CTRLA = ADC_ENABLE_bm;			//0b00000101
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
}
 29e:	00 00       	nop
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <tcc0_init>:
void tcc0_init(void)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
	TCC1.PER = 20000;
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	98 e0       	ldi	r25, 0x08	; 8
 2b2:	20 e2       	ldi	r18, 0x20	; 32
 2b4:	3e e4       	ldi	r19, 0x4E	; 78
 2b6:	fc 01       	movw	r30, r24
 2b8:	26 a3       	std	Z+38, r18	; 0x26
 2ba:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
 2bc:	80 e4       	ldi	r24, 0x40	; 64
 2be:	98 e0       	ldi	r25, 0x08	; 8
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
	EVSYS_CH0MUX = EVSYS_CHMUX_TCC1_OVF_gc;
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	28 ec       	ldi	r18, 0xC8	; 200
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18
	
}
 2d0:	00 00       	nop
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <main>:
int randomFlag=0;
int main(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	
	adc_init();
 2e0:	0e 94 18 01 	call	0x230	; 0x230 <adc_init>
	tcc0_init();
 2e4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <tcc0_init>
	usartd0_init();
 2e8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <usartd0_init>
	
	ADCA.CH0.CTRL = ADC_CH_START_bm | ADC_CH_INPUTMODE_DIFFWGAIN_gc; //0b10000011 in signed mode inputmode diff w/gain?
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	23 e8       	ldi	r18, 0x83	; 131
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 a3       	std	Z+32, r18	; 0x20
	while (1)
	{
		if(randomFlag)
 2f6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2fa:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 2fe:	89 2b       	or	r24, r25
 300:	d1 f3       	breq	.-12     	; 0x2f6 <main+0x1e>
		{
			usartd0_out_char(data & 0xFF);
 302:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <data>
 306:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <data+0x1>
 30a:	0e 94 0d 02 	call	0x41a	; 0x41a <usartd0_out_char>
			usartd0_out_char((data >> 8)& 0xFF);
 30e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <data>
 312:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <data+0x1>
 316:	89 2f       	mov	r24, r25
 318:	99 27       	eor	r25, r25
 31a:	0e 94 0d 02 	call	0x41a	; 0x41a <usartd0_out_char>
			randomFlag =0;
 31e:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
 322:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
	}
 326:	e7 cf       	rjmp	.-50     	; 0x2f6 <main+0x1e>

00000328 <__vector_71>:
}
ISR(ADCA_CH0_vect)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 338:	0f 92       	push	r0
 33a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 33e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 342:	0f 92       	push	r0
 344:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 348:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 34c:	0f 92       	push	r0
 34e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 352:	2f 93       	push	r18
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	data = ADCA_CH0_RES;
 364:	84 e2       	ldi	r24, 0x24	; 36
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	fc 01       	movw	r30, r24
 36a:	80 81       	ld	r24, Z
 36c:	91 81       	ldd	r25, Z+1	; 0x01
 36e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <data>
 372:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <data+0x1>
	ADCA.CH0.INTFLAGS = 1;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	92 e0       	ldi	r25, 0x02	; 2
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	fc 01       	movw	r30, r24
 37e:	23 a3       	std	Z+35, r18	; 0x23
	randomFlag =1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 388:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
}
 38c:	00 00       	nop
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 3a2:	0f 90       	pop	r0
 3a4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 3a8:	0f 90       	pop	r0
 3aa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 3ae:	0f 90       	pop	r0
 3b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <usartd0_init>:
*          transmitter.
* Input(s): N/A
* Output: N/A
******************************************************************************/
void usartd0_init(void)
{
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
  /* configure relevant TxD and RxD pins */
	PORTD.OUTSET = PIN3_bm;
 3c2:	80 e6       	ldi	r24, 0x60	; 96
 3c4:	96 e0       	ldi	r25, 0x06	; 6
 3c6:	28 e0       	ldi	r18, 0x08	; 8
 3c8:	fc 01       	movw	r30, r24
 3ca:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 3cc:	80 e6       	ldi	r24, 0x60	; 96
 3ce:	96 e0       	ldi	r25, 0x06	; 6
 3d0:	28 e0       	ldi	r18, 0x08	; 8
 3d2:	fc 01       	movw	r30, r24
 3d4:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 3d6:	80 e6       	ldi	r24, 0x60	; 96
 3d8:	96 e0       	ldi	r25, 0x06	; 6
 3da:	24 e0       	ldi	r18, 0x04	; 4
 3dc:	fc 01       	movw	r30, r24
 3de:	22 83       	std	Z+2, r18	; 0x02

  /* configure baud rate */
	/* At 2 MHz SYSclk, 5 BSEL, -6 BSCALE corresponds to 115200 bps */
	USARTD0.BAUDCTRLA = (uint8_t)11;
 3e0:	80 ea       	ldi	r24, 0xA0	; 160
 3e2:	99 e0       	ldi	r25, 0x09	; 9
 3e4:	2b e0       	ldi	r18, 0x0B	; 11
 3e6:	fc 01       	movw	r30, r24
 3e8:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)( (-7 << 4) | (11>> 8) );
 3ea:	80 ea       	ldi	r24, 0xA0	; 160
 3ec:	99 e0       	ldi	r25, 0x09	; 9
 3ee:	20 e9       	ldi	r18, 0x90	; 144
 3f0:	fc 01       	movw	r30, r24
 3f2:	27 83       	std	Z+7, r18	; 0x07

  /* configure remainder of serial protocol */
  /* in this example, a protocol with 8 data bits, no parity, and
   * one stop bit is chosen. */
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc |
 3f4:	80 ea       	ldi	r24, 0xA0	; 160
 3f6:	99 e0       	ldi	r25, 0x09	; 9
 3f8:	23 e0       	ldi	r18, 0x03	; 3
 3fa:	fc 01       	movw	r30, r24
 3fc:	25 83       	std	Z+5, r18	; 0x05
					        USART_PMODE_DISABLED_gc		  |
					        USART_CHSIZE_8BIT_gc        &
                  ~USART_SBMODE_bm;

  /* enable receiver and/or transmitter systems */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 3fe:	80 ea       	ldi	r24, 0xA0	; 160
 400:	99 e0       	ldi	r25, 0x09	; 9
 402:	28 e1       	ldi	r18, 0x18	; 24
 404:	fc 01       	movw	r30, r24
 406:	24 83       	std	Z+4, r18	; 0x04

  /* enable interrupt (optional) */
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc; 
 408:	80 ea       	ldi	r24, 0xA0	; 160
 40a:	99 e0       	ldi	r25, 0x09	; 9
 40c:	20 e1       	ldi	r18, 0x10	; 16
 40e:	fc 01       	movw	r30, r24
 410:	23 83       	std	Z+3, r18	; 0x03
}
 412:	00 00       	nop
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <usartd0_out_char>:
* Purpose: To output a character from the transmitter within USARTD0.
* Input(s): c (char)
* Output: N/A
******************************************************************************/
void usartd0_out_char(char c)
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	1f 92       	push	r1
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	89 83       	std	Y+1, r24	; 0x01
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 426:	00 00       	nop
 428:	80 ea       	ldi	r24, 0xA0	; 160
 42a:	99 e0       	ldi	r25, 0x09	; 9
 42c:	fc 01       	movw	r30, r24
 42e:	81 81       	ldd	r24, Z+1	; 0x01
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	80 72       	andi	r24, 0x20	; 32
 436:	99 27       	eor	r25, r25
 438:	89 2b       	or	r24, r25
 43a:	b1 f3       	breq	.-20     	; 0x428 <usartd0_out_char+0xe>
	USARTD0.DATA = c;
 43c:	80 ea       	ldi	r24, 0xA0	; 160
 43e:	99 e0       	ldi	r25, 0x09	; 9
 440:	29 81       	ldd	r18, Y+1	; 0x01
 442:	fc 01       	movw	r30, r24
 444:	20 83       	st	Z, r18
}
 446:	00 00       	nop
 448:	0f 90       	pop	r0
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
